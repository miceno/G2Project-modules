<?php
/*
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision: 1644 $
 * @package CheckoutGroups
 * @subpackage Classes
 * @author Alec Myers <alec@alecmyers.com>
 */

/**
 * Required classes
 */

/**
 * This is an implementation of the checkout module's CheckoutStatusPageInterface_1_0
 *
 * @package CheckoutGroups
 * @subpackage Classes
 */
class CheckoutGroupsStatusPlugin extends CheckoutStatusPageInterface_1_0 {
	/**
	 * @see CheckoutStatusPageInterface_1_0::getCustomPageTemplate()
	 */
	public function getStatusPageTemplate() {
		return array(null, dirname(__FILE__) . '/../templates/GroupStatus.tpl');
	}

	/**
	 * @see CheckoutStatusPageInterface_1_0::setStatusPageVariables($transactionId)
	 */
	public function loadTemplate(&$template, &$form) {
		// Figure out which item we're talking about
		$transactionId = GalleryUtilities::getRequestVariables('transactionId');

		if (empty($transactionId)) {
			return array(GalleryCoreApi::error(ERROR_BAD_PARAMETER), null, null);
		}
		list($ret, $items) = CheckoutTransactionHelper::fetchFullTransactionItems($transactionId);

		if ($ret) {
			return array($ret, null, null);
		}
		list($ret, $transaction) = GalleryCoreAPI::loadEntitiesById($transactionId, 'GalleryCheckoutTransaction');

		if ($ret) {
			return array($ret, null, null);
		}
		$buyerId   = $transaction->getBuyerId();
		$hasGroup  = false;
		$groupInfo = array();

		foreach ($items as $item) { //$item.itemId and $item.product are the two things we need
			list($ret, $products) = CheckoutProductMapHelper::fetchProducts($item['itemId'], true, true);

			if ($ret) {
				return array($ret, null, null);
			}

			foreach ($products as $product) {
				if ($product['productId'] == $item['product'] && isset($product['groupId'])) {//matches one from order
					$hasGroup          = true;
					list($ret, $group) = GalleryCoreAPI::loadEntitiesById($product['groupId'], 'GalleryGroup');

					if ($ret) {
						return array($ret, null, null);
					}
					list($ret, $isInGroup) = GalleryCoreAPI::isUserInGroup($buyerId, $product['groupId']);

					if ($ret) {
						return array($ret, null, null);
					}
					$groupInfo[] = array(
						'itemName'    => $item['itemName'],
						'productName' => $item['productName'],
						'groupName'   => $group->getGroupName(),
						'isInGroup'   => $isInGroup,
					);
				}
			}
		}
		list($ret, $anon) = GalleryCoreApi::isAnonymousUser($buyerId);

		if ($ret) {
			return array($ret, null, null);
		}
		$checkoutgroups['isGuest']   = $anon;
		$checkoutgroups['hasGroups'] = $hasGroup;
		$checkoutgroups['groupInfo'] = $groupInfo;
		$template->setvariable('checkoutgroups', $checkoutgroups);

		return array(null, 'modules/checkoutgroups/templates/GroupStatus.tpl', 'modules_checkoutgroups');
	}

	/**
	 * @see CheckoutStatusPageInterface_1_0::handleRequest($transactionId)
	 */
	public function handleRequest(&$form) {
		return array(null, null);
	}
}
